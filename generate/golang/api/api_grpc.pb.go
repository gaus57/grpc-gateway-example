// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.21.12
// source: api/api.proto

package api

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
	emptypb "google.golang.org/protobuf/types/known/emptypb"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	ApiV0_Ping_FullMethodName       = "/ApiV0/Ping"
	ApiV0_CreateItem_FullMethodName = "/ApiV0/CreateItem"
	ApiV0_GetItem_FullMethodName    = "/ApiV0/GetItem"
	ApiV0_UpdateItem_FullMethodName = "/ApiV0/UpdateItem"
	ApiV0_DeleteItem_FullMethodName = "/ApiV0/DeleteItem"
)

// ApiV0Client is the client API for ApiV0 service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
//
// Апи v0.
type ApiV0Client interface {
	// Пинг.
	Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PingResult, error)
	// Создать что-то.
	CreateItem(ctx context.Context, in *CreateItemParams, opts ...grpc.CallOption) (*CreateItemResult, error)
	// Получить что-то.
	GetItem(ctx context.Context, in *GetItemParams, opts ...grpc.CallOption) (*GetItemResult, error)
	// Обновить что-то.
	UpdateItem(ctx context.Context, in *UpdateItemParams, opts ...grpc.CallOption) (*UpdateItemResult, error)
	// Удалить что-то.
	DeleteItem(ctx context.Context, in *DeleteItemParams, opts ...grpc.CallOption) (*emptypb.Empty, error)
}

type apiV0Client struct {
	cc grpc.ClientConnInterface
}

func NewApiV0Client(cc grpc.ClientConnInterface) ApiV0Client {
	return &apiV0Client{cc}
}

func (c *apiV0Client) Ping(ctx context.Context, in *emptypb.Empty, opts ...grpc.CallOption) (*PingResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(PingResult)
	err := c.cc.Invoke(ctx, ApiV0_Ping_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiV0Client) CreateItem(ctx context.Context, in *CreateItemParams, opts ...grpc.CallOption) (*CreateItemResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(CreateItemResult)
	err := c.cc.Invoke(ctx, ApiV0_CreateItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiV0Client) GetItem(ctx context.Context, in *GetItemParams, opts ...grpc.CallOption) (*GetItemResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(GetItemResult)
	err := c.cc.Invoke(ctx, ApiV0_GetItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiV0Client) UpdateItem(ctx context.Context, in *UpdateItemParams, opts ...grpc.CallOption) (*UpdateItemResult, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(UpdateItemResult)
	err := c.cc.Invoke(ctx, ApiV0_UpdateItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *apiV0Client) DeleteItem(ctx context.Context, in *DeleteItemParams, opts ...grpc.CallOption) (*emptypb.Empty, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(emptypb.Empty)
	err := c.cc.Invoke(ctx, ApiV0_DeleteItem_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// ApiV0Server is the server API for ApiV0 service.
// All implementations must embed UnimplementedApiV0Server
// for forward compatibility.
//
// Апи v0.
type ApiV0Server interface {
	// Пинг.
	Ping(context.Context, *emptypb.Empty) (*PingResult, error)
	// Создать что-то.
	CreateItem(context.Context, *CreateItemParams) (*CreateItemResult, error)
	// Получить что-то.
	GetItem(context.Context, *GetItemParams) (*GetItemResult, error)
	// Обновить что-то.
	UpdateItem(context.Context, *UpdateItemParams) (*UpdateItemResult, error)
	// Удалить что-то.
	DeleteItem(context.Context, *DeleteItemParams) (*emptypb.Empty, error)
	mustEmbedUnimplementedApiV0Server()
}

// UnimplementedApiV0Server must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedApiV0Server struct{}

func (UnimplementedApiV0Server) Ping(context.Context, *emptypb.Empty) (*PingResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Ping not implemented")
}
func (UnimplementedApiV0Server) CreateItem(context.Context, *CreateItemParams) (*CreateItemResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreateItem not implemented")
}
func (UnimplementedApiV0Server) GetItem(context.Context, *GetItemParams) (*GetItemResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetItem not implemented")
}
func (UnimplementedApiV0Server) UpdateItem(context.Context, *UpdateItemParams) (*UpdateItemResult, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UpdateItem not implemented")
}
func (UnimplementedApiV0Server) DeleteItem(context.Context, *DeleteItemParams) (*emptypb.Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method DeleteItem not implemented")
}
func (UnimplementedApiV0Server) mustEmbedUnimplementedApiV0Server() {}
func (UnimplementedApiV0Server) testEmbeddedByValue()               {}

// UnsafeApiV0Server may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ApiV0Server will
// result in compilation errors.
type UnsafeApiV0Server interface {
	mustEmbedUnimplementedApiV0Server()
}

func RegisterApiV0Server(s grpc.ServiceRegistrar, srv ApiV0Server) {
	// If the following call pancis, it indicates UnimplementedApiV0Server was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&ApiV0_ServiceDesc, srv)
}

func _ApiV0_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(emptypb.Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiV0Server).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiV0_Ping_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiV0Server).Ping(ctx, req.(*emptypb.Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiV0_CreateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(CreateItemParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiV0Server).CreateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiV0_CreateItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiV0Server).CreateItem(ctx, req.(*CreateItemParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiV0_GetItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetItemParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiV0Server).GetItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiV0_GetItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiV0Server).GetItem(ctx, req.(*GetItemParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiV0_UpdateItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UpdateItemParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiV0Server).UpdateItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiV0_UpdateItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiV0Server).UpdateItem(ctx, req.(*UpdateItemParams))
	}
	return interceptor(ctx, in, info, handler)
}

func _ApiV0_DeleteItem_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(DeleteItemParams)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ApiV0Server).DeleteItem(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: ApiV0_DeleteItem_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ApiV0Server).DeleteItem(ctx, req.(*DeleteItemParams))
	}
	return interceptor(ctx, in, info, handler)
}

// ApiV0_ServiceDesc is the grpc.ServiceDesc for ApiV0 service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ApiV0_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "ApiV0",
	HandlerType: (*ApiV0Server)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Ping",
			Handler:    _ApiV0_Ping_Handler,
		},
		{
			MethodName: "CreateItem",
			Handler:    _ApiV0_CreateItem_Handler,
		},
		{
			MethodName: "GetItem",
			Handler:    _ApiV0_GetItem_Handler,
		},
		{
			MethodName: "UpdateItem",
			Handler:    _ApiV0_UpdateItem_Handler,
		},
		{
			MethodName: "DeleteItem",
			Handler:    _ApiV0_DeleteItem_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "api/api.proto",
}
